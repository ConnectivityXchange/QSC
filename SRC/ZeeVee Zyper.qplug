-----------------------------------------------------------------
-- ZeeVee Zyper Management Platform Plugin for QSC Q-SYS
-- Modified by Ian Campbell
-- Developed by Chowmain Software & Apps
-- http://www.chowmainsoft.com
--
-- Revision Dated: 2023-NOV-16
-- Version Number: 1.1 build 0.0.0.5
--
-- Changelog:
-- 2023-NOV-16 - Added more Multiview functionality
-- 2023-MAY-12 - Fixed issue with one-way commands not sending for matrixes more than 1x1
-- 2023-JAN-06 - Certification RC4 - moved ip address from properties to setup page
-- 2023-JAN-04 - Certification RC3
-- 2022-DEC-19 - Certification RC2
-- 2019-JUN-07 - Beta 1
-----------------------------------------------------------------

COLOR = {
	ZEEVEE_PURPLE = {90,56,139}
}

PluginInfo =
{
  Name = "ZeeVee~Zyper with Multiview",
  Version = "1.4",
  BuildVersion = "0.0.0.2",
  Id = "8111977b-91d9-4ef4-8c51-e57ca99c67eg",
  Description = "Plugin to interface ZeeVee Zyper Management Platform running Firmware Version 2.0 and above",
  IsManaged = true,
  Manufacturer = "ZeeVee",
  Model = "Zyper",
  Type = Reflect and Reflect.Types.Other or 0,
  devEnvironment = true
}

PluginInfoExtended = {
	PrettyName = string.format("ZeeVee Zyper Management Platform Version %s",PluginInfo.Version),
	GetColor = COLOR.ZEEVEE_PURPLE
}

LOGO = {
	['IMAGE'] = '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7q9vQL5A0rnARolzgY3G5wj9Z6l5eq48NUwKxrH/k6UxwWmbExInU5492m8e+pcAbwDfQfzfssY63loTJKfWHCJxeh3iOHAX8GvMSBxVomXzLcn/72IUvEKFChUqVKhQoUKFChUqVKhQoUKFChUqVKhQoUKFChUqVKhQoUKFChUqVKhQoUKFChUqVKhQoUKFChUqVKhQoUKFChUqVKhQoUKFChUqVKhQoUKFChUqVKhQoUKFChUqVKhQoUKFChUqVKhQoUKFChUqVKhQ4f9n7+2DLCvv+87P91ZXV9fUbNfs7NR4Mp6dHbOETAgmGBOCMMVizMrYJphV3+GOkCwpyJKsV1vGhGgJpaJUKqylZEWRCVKwonepj/ocRSsrsiLLWJYxxVKEUBhrCaEwwSyeTGanpqamJr1TXf3bP87LfZ5zzr197r09M435faq6773n5Xl/nt/z+z1vjuM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juNsDjrfAXAcx3GmI0nT7aADnR42TiNeGfSXVs9mmBznXJOk2SKwv8uzZpzWBPUgSbOLgPkOj66bceTwoaXjXdx1HMdxnPPF3PkOgONsNZI0nTPTAYl9AIYdkenFwSFXnJythg4CD3R8+EfAR4Hnz154HOfcY3CF4L6Ojz9NXg9e7Oj4fRSyYAPOSNwPfKtjOCqW03ROpr1gBwzNgR2T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',
	['SIZE'] = {1024/5,320/5}
}

function GetPrettyName(props)
	return PluginInfoExtended.PrettyName
end

function GetColor(props)
	return PluginInfoExtended.GetColor
end

function RectifyProperties(props)
	if props.plugin_show_debug.Value == false then 
		props["Debug Print"].IsHidden = true 
	end
	return props
end

DEBUG = {
	debugTx = false,
	debugRx = false,
	debugFunction = false
}

function DEBUG.SET_DEBUG_PRINT(debugPrint)
	if debugPrint == "Tx/Rs" then
		DEBUG.debugTx,DEBUG.debugRx = true,true
	elseif debugPrint == "Tx" then
		DEBUG.debugTx = true
	elseif debugPrint == "Rx" then
		DEBUG.debugRx = true
	elseif debugPrint == "All" then
		DEBUG.debugTx, DEBUG.debugRx, DEBUG.debugFunction = true,true,true
	end
end

function DEBUG.FUNCTION(s)
	if(DEBUG.debugFunction == true) then print(s) end
end

function DEBUG.RX(s)
	if(DEBUG.debugRx == true) then print(s) end
end

function DEBUG.TX(s)
	if(DEBUG.debugTx == true) then print(s) end
end

function GetProperties()
	return
	{
		{
		  Name = "Draw Router",
		  Type = "enum",
		  Choices = {"True","False"},
		  Value = PluginInfo.devEnvironment == true and "True" or "False"
		},
		{
		  Name = "Auto Setup",
		  Type = "boolean",
		  Value = PluginInfo.devEnvironment == true and true or false
		},
		{
		  Name = "IP Address",
		  Type = "string",
		  Value = PluginInfo.devEnvironment == true and "192.168.10.11" or ""
		},
		{
		  Name = "Port",
		  Type = "integer",
		  Min  = 1,
		  Max = 65535,
		  Value = 80
		},
		{
		  Name = "Username",
		  Type = "string",
		  Value = PluginInfo.devEnvironment == true and "QSC" or ""
		},
		{
		  Name = "Password",
		  Type = "string",
		  Value = PluginInfo.devEnvironment == true and "QSCQSC" or ""
		},
		{
		  Name = "Number of encoders",
		  Type = "integer",
		  Min  = 1,
		  Max = 100,
		  Value = PluginInfo.devEnvironment == true and 2 or 1
		},
		{
		  Name = "Number of decoders",
		  Type = "integer",
		  Min  = 1,
		  Max = 100,
		  Value = PluginInfo.devEnvironment == true and 3 or 1
		},
		{
		  Name = "Number of zones",
		  Type = "integer",
		  Min  = 1,
		  Max = 100,
		  Value = PluginInfo.devEnvironment == true and 1 or 1
		},
		{
		  Name = "Number of multiviews",
		  Type = "integer",
		  Min = 1,
		  Max = 100,
		  Value = PluginInfo.devEnvironment == true and 1 or 1
		},
		{
		  Name = "Debug Print",
		  Type = "enum",
		  Choices = {"None","Tx/Rx","Tx","Rx","Function Calls", "All"},
		  Value = PluginInfo.devEnvironment == true and "All" or "None"
		},
	}
end

local pagenames = { 
  "Setup",
  "Join",
  "Multiview",
  "Videowall",
  "One-Way Commands"
}

function GetPages()
	local pages = {}
	for ix,name in ipairs(pagenames) do
		table.insert( pages, { name = pagenames[ix] })
	end
	return pages
end

function GetControls(props)
  local c = 
  {
    {
      Name = "Status",
      ControlType = "Indicator",
      IndicatorType = "Status",
      UserPin = true,
      PinStyle = "Output",
      Count = 1,
    },
    {
      Name = "ipAddress",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "port",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "multiviewName",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "multiviewDecoder",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
	  Name = "multiviewSet",
	  ControlType = "Button",
	  ButtonType = "Trigger",
	  Count = 1,
	  UserPin = true,
	  PinStyle = "Both",
	},
	{
		Name = "multiviewNames",
		ControlType = "Text",
		UserPin = false,
		Count = props["Number of multiviews"].Value,
	},
    {
      Name = "videowallEncoder",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
      Name = "videowallWallName",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
    {
	  Name = "videowallSet",
	  ControlType = "Button",
	  ButtonType = "Trigger",
	  Count = 1,
	  UserPin = true,
	  PinStyle = "Both",
	},
    {
      Name = "sourceName",
      ControlType = "Text",
      UserPin = false,
      Count = props["Number of encoders"].Value,
    },
    {
      Name = "displayName",
      ControlType = "Text",
      UserPin = false,
      Count = props["Number of decoders"].Value,
    },
    {
      Name = "zoneSourceName",
      ControlType = "Text",
      UserPin = false,
      Count = props["Number of encoders"].Value,
    },
    {
      Name = "zoneName",
      ControlType = "Text",
      UserPin = false,
      Count = props["Number of zones"].Value,
    },
    {
      Name = "joinType",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Both",
      Count = props["Number of encoders"].Value,
    },
    {
      Name = "CurrentInput",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Both",
      Count = props["Number of decoders"].Value, --this was Number of decoders before
    },
    {
      Name = "preset",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Both",
      Count = 1,
    },
  }
    local z = tonumber(props["Number of zones"].Value)
    local d = tonumber(props["Number of decoders"].Value)
    local e = tonumber(props["Number of encoders"].Value)
	local m = tonumber(props["Number of multiviews"].Value)
    for a=1,d,1 do
		local t = {
			  Name = "Send_Output_" .. a .. "_RS232",
			  ControlType = "Text",
			  Count = 1,
			  UserPin = true,
			  PinStyle = "Both",
			}
		table.insert(c,t)
		local t = {
			  Name = "Send_Output_" .. a .. "_IR",
			  ControlType = "Text",
			  Count = 1,
			  UserPin = true,
			  PinStyle = "Both",
			}
		table.insert(c,t)
		local t = {
			  Name = "Send_Output_" .. a .. "_CEC_HEX",
			  ControlType = "Text",
			  Count = 1,
			  UserPin = true,
			  PinStyle = "Both",
			}
		table.insert(c,t)
		local t = {
			  Name = "Send_Output_" .. a .. "_CEC_ON",
			  ControlType = "Button",
			  ButtonType = "Momentary",
			  Count = 1,
			  UserPin = true,
			  PinStyle = "Both",
			}
		table.insert(c,t)
		local t = {
			  Name = "Send_Output_" .. a .. "_CEC_OFF",
			  ControlType = "Button",
		      ButtonType = "Momentary",
			  Count = 1,
			  UserPin = true,
			  PinStyle = "Both",
			}
		table.insert(c,t)
		if(props["Draw Router"].Value == "True") then
			for b=1,e,1 do
				local t = {
					  Name = "Join_Output_" .. a .. "_Input_" .. b,
					  ControlType = "Button",
					  ButtonType = "Toggle",
					  Count = 1,
					  UserPin = true,
					  PinStyle = "Both",
					}
				table.insert(c,t)
			end
			for b=1,m,1 do -- Add multiview routing buttons to entire list
				local t = {
					Name = "Join_Output_"..a.."_Multiview_"..b,
					ControlType = "Button",
					ButtonType = "Toggle",
					Count = 1,
					UserPin = true,
					PinStyle = "Both",
				}
				table.insert(c,t)
			end
		end
    end
    if z > 0 then
		for a=1,z,1 do
			for b=1,e,1 do
				local t = {
					  Name = "Join_Zone_" .. a .. "_Input_" .. b,
					  ControlType = "Button",
					  ButtonType = "Momentary",
					  Count = 1,
					  UserPin = true,
					  PinStyle = "Both",
					}
				table.insert(c,t)
			end
		end
	end
	for a=1,e,1 do
		local t = {
			  Name = "Send_Input_" .. a .. "_RS232",
			  ControlType = "Text",
			  Count = 1,
			  UserPin = true,
			  PinStyle = "Both",
			}
		table.insert(c,t)
		local t = {
			  Name = "Send_Input_" .. a .. "_IR",
			  ControlType = "Text",
			  Count = 1,
			  UserPin = true,
			  PinStyle = "Both",
			}
		table.insert(c,t)
	end
	for a=1,m,1 do
		for b=1,6,1 do
			local t = { -- Add control to configure individual multiview dynamically
				Name = "Join_Multiview_"..a.."_Window_"..b,
				ControlType = "Text",
				Count = 1,
				UserPin = true,
				PinStyle = "Both",
			}
			table.insert(c,t)
		end
	end
  return c
end

function GetControlLayout(props)
local layout, graphics = {},{}
  local CurrentPage = pagenames[props["page_index"].Value]
  if(CurrentPage=="One-Way Commands") then
    local d = tonumber(props["Number of decoders"].Value)
    local e = tonumber(props["Number of encoders"].Value)
	table.insert(graphics,{
		Type = "Text",
		Text = "Preset: ",
		Position = { 0, 0},
		HTextAlign = "Left",
		Size = { 100, 18 },
	})
		layout["preset"] =
		{
			PrettyName = "Preset",
			Style = "Text",
			Position = { 70, 0},
			Size = { 100, 18 },
		}
		
	table.insert(graphics,{
		Type = "Text",
		Text = "RS232",
		Position = { 70, 40},
		HTextAlign = "Left",
		Size = { 100, 18 },
	})
	table.insert(graphics,{
		Type = "Text",
		Text = "IR",
		Position = { 190, 40},
		HTextAlign = "Left",
		Size = { 100, 18 },
	})
	table.insert(graphics,{
		Type = "Text",
		Text = "CEC HEX",
		Position = { 310, 40},
		HTextAlign = "Left",
		Size = { 100, 18 },
	})
	table.insert(graphics,{
		Type = "Text",
		Text = "CEC ON",
		Position = { 430, 40},
		HTextAlign = "Left",
		Size = { 80, 18 },
	})
	table.insert(graphics,{
		Type = "Text",
		Text = "CEC OFF",
		Position = { 490, 40},
		HTextAlign = "Left",
		Size = { 80, 18 },
	})
    for a=1,d,1 do
		table.insert(graphics,{
			Type = "Text",
			Text = "Decoder " .. a .. ":",
			Position = { 0, 60 + ((a-1) * 20)},
			HTextAlign = "Left",
			Size = { 100, 18 },
		})
		layout["Send_Output_" .. a .. "_RS232"] =
		{
			PrettyName = "RS232 Command~Decoder " .. a,
			Style = "Text",
			Position = { 70, 60 + ((a-1) * 20)},
			Size = { 100, 18 },
		}
		layout["Send_Output_" .. a .. "_IR"] =
		{
			PrettyName = "IR Command~Decoder " .. a,
			Style = "Text",
			Position = { 190, 60 + ((a-1) * 20)},
			Size = { 100, 18 },
		}
		layout["Send_Output_" .. a .. "_CEC_HEX"] =
		{
			PrettyName = "CEC Hex Command~Decoder " .. a,
			Style = "Text",
			Position = { 310, 60 + ((a-1) * 20)},
			Size = { 100, 18 },
		}
		layout["Send_Output_" .. a .. "_CEC_ON"] =
		{
			PrettyName = "CEC On Command~Decoder " .. a,
			Style = "Button",
			Position = { 430, 60 + ((a-1) * 20)},
			Size = { 40, 18 },
		}
		layout["Send_Output_" .. a .. "_CEC_OFF"] =
		{
			PrettyName = "CEC Off Command~Decoder " .. a,
			Style = "Button",
			Position = { 490, 60 + ((a-1) * 20)},
			Size = { 40, 18 },
		}
    end
	for a=1,e,1 do
		table.insert(graphics,{
			Type = "Text",
			Text = "Encoder " .. a .. ":",
			Position = { 0, (d * 20) + ((a-1) * 20) + 60},
			HTextAlign = "Left",
			Size = { 100, 18 },
		})
		layout["Send_Input_" .. a .. "_RS232"] =
		{
			PrettyName = "RS232 Command~Encoder " .. a,
			Style = "Text",
			Position = { 70, (d * 20) + ((a-1) * 20) + 60},
			Size = { 100, 18 },
		}
	end
  elseif(CurrentPage=="Multiview") then
	local m = tonumber(props["Number of multiviews"].Value)
	table.insert(graphics,{
			Type = "Text",
			Text = "Multiview Name:",
			Position = { 0, 0},
			HTextAlign = "Left",
			Size = { 100, 18 },
		})
	layout["multiviewName"] =
	{
		PrettyName = "Multiview~Name",
		Style = "ComboBox",
		Position = { 100, 0},
		Size = { 100, 18 },
	}
	table.insert(graphics,{
			Type = "Text",
			Text = "Multiview Decoder:",
			Position = { 0, 20},
			HTextAlign = "Left",
			Size = { 100, 18 },
		})
	layout["multiviewDecoder"] =
	{
		PrettyName = "Multiview~Decoder",
		Style = "ComboBox",
		Position = { 100, 20},
		Size = { 100, 18 },
	}
	layout["multiviewSet"] =
	{
		PrettyName = "Multiview~Set",
		Legend = "SET",
		Style = "Button",
		Position = { 210, 0},
		Size = { 80, 38 },
	}
	table.insert(graphics,{ --add a box just below
		Type = "GroupBox",
		Text = "Window Routes",
		HTextAlign = "Left",
		StrokeWidth = 1,
		CornerRadius = 8,
		Position = { 50, 40 },
		Size = { 60 + (40 *(6)), 60 + (20 *(m))},
	})
	table.insert(graphics,{
		Type = "Text",
		Text = "Multiv",
		Position = { 0, 75},
		HTextAlign = "Center",
		Size = { 50, 10 },
	})
	for a=1,6 do
		table.insert(graphics,{ --add window numbers for context
			Type = "Text",
			Text = tostring(a),
			Position = { 65 + (40 *(a-1)), 75},
			HTextAlign = "Center",
			Size = { 30, 10 },
		})
	end
	for a=1,m,1 do
		table.insert(graphics,{ --add multiview numbers for context
			Type = "Text",
			Text = tostring(a),
			Position = { 0,95+(20*(a-1))},
			HTextAlign = "Center",
			Size = { 30, 10 },
		})
		for b=1,6,1 do --add multiview routing to UI
			layout["Join_Multiview_"..a.."_Window_" .. b] =
			{
				PrettyName = string.format("Multiview~MV_%i_Window_%i",a,b), -- The Tilde (~) creates a folder break for the Control Pin list
				Style = "Text",
				Position = { 60 + (40 *(b-1)), 90 + (20 *(a-1)) },
				Size = { 40, 18 },
			}
		end
	end
  elseif(CurrentPage=="Videowall") then
	table.insert(graphics,{
			Type = "Text",
			Text = "Video-wall Encoder:",
			Position = { 0, 0},
			HTextAlign = "Left",
			Size = { 100, 18 },
		})
	layout["videowallEncoder"] =
	{
		PrettyName = "Videowall~Encoder",
		Style = "ComboBox",
		Position = { 100, 0},
		Size = { 100, 18 },
	}
	table.insert(graphics,{
			Type = "Text",
			Text = "Videl-wall Name:",
			Position = { 0, 20},
			HTextAlign = "Left",
			Size = { 100, 18 },
		})
	layout["videowallWallName"] =
	{
		PrettyName = "Videowall~WallName",
		Style = "ComboBox",
		Position = { 100, 20},
		Size = { 100, 18 },
	}
	layout["videowallSet"] =
	{
		PrettyName = "Videowall~Set",
		Legend = "SET",
		Style = "Button",
		Position = { 210, 0},
		Size = { 80, 38 },
	}
  elseif(CurrentPage=="Join") then
    local d = tonumber(props["Number of decoders"].Value)
    local e = tonumber(props["Number of encoders"].Value)
    local z = tonumber(props["Number of zones"].Value)
	local m = tonumber(props["Number of multiviews"].Value)
		table.insert(graphics,{
			Type = "GroupBox",
			Text = "Decoder",
			HTextAlign = "Left",
			StrokeWidth = 1,
			CornerRadius = 8,
			Position = { 50, 0 },
			Size = { 60 + (40 *(d-1)), 120 + (20 *(e-1))+(20*(m-1))}, --the box is larger to contain multiview as inputs
		  })
		  table.insert(graphics,{
				  Type = "Text",
				  Text = "Encoder",
				  Position = { 0, 45},
				  HTextAlign = "Center",
				  Size = { 50, 10 },
			})
			table.insert(graphics,{
					Type = "Text",
					Text = "Multiv",
					Position = { 0, 80+ (20 *(e-1))},
					HTextAlign = "Center",
					Size = { 50, 10 },
			})
	if(z > 0) then
		table.insert(graphics,{
			Type = "GroupBox",
			Text = "Zone",
			HTextAlign = "Left",
			StrokeWidth = 1,
			CornerRadius = 8,
			Position = { 50, 130 + (20 *(e-1))+(20*(m-1)) },
			Size = { 60 + (40 *(z-1)), 70 + (20 *(e-1))},
		  })
		table.insert(graphics,{
				Type = "Text",
				Text = "Encoder",
				Position = { 0, 45},
				HTextAlign = "Center",
				Size = { 50, 10 },
			})
		table.insert(graphics,{
				Type = "Text",
				Text = "Encoder",
				Position = { 0,135 + (20 *(e))+(20*(m-1))},
				HTextAlign = "Center",
				Size = { 50, 10 },
			})
		for a=1,z do
			table.insert(graphics,{
					Type = "Text",
					Text = tostring(a),
					--Position = { 65 + (40 *(a-1)), 125 + (60 *(e-1))},
					Position = { 65 + (40 *(a-1)), 135 + (20 *(e))+(20*(m-1))},
					HTextAlign = "Center",
					Size = { 30, 10 },
				})
			for b=1,e do
				layout["Join_Zone_" .. a .. "_Input_" .. b] =
				{
					PrettyName = string.format("Join~Zone_%i_Input_%i",a,b), -- The Tilde (~) creates a folder break for the Control Pin list
					Style = "Button",
					Position = { 60 + (40 *(a-1)), (20 *(e-1)) + 170 + (20 *(b-1)) + (20*(m-1))},
					Size = { 40, 18 },
				}
			end
		end
    end
    for a=1,d do
		table.insert(graphics,{
				Type = "Text",
				Text = tostring(a),
				Position = { 65 + (40 *(a-1)), 25},
				HTextAlign = "Center",
				Size = { 30, 10 },
			})
		layout["CurrentInput" ..tostring(d==1 and "" or " "..a)] =
		{
			PrettyName = string.format("Current_Input~Output_%i",a), -- The Tilde (~) creates a folder break for the Control Pin list
			Style = "Text",
			Position = { 60 + (40 *(a-1)), 40},
			Size = { 40, 18 },
		}
		
		if(props["Draw Router"].Value == "True") then
			for b=1,e do
				layout["Join_Output_" .. a .. "_Input_" .. b] =
				{
					PrettyName = string.format("Join~Output_%i_Input_%i",a,b), -- The Tilde (~) creates a folder break for the Control Pin list
					Style = "Button",
					Position = { 60 + (40 *(a-1)), 60 + (20 *(b-1)) },
					Size = { 40, 18 },
				}
			end
			for b=1,m,1 do
				layout["Join_Output_" .. a .. "_Multiview_" .. b] =
				{
					PrettyName = string.format("Join~Output_%i_Multiview_%i",a,b), -- The Tilde (~) creates a folder break for the Control Pin list
					Style = "Button",
					Position = { 60 + (40 *(a-1)), 90 + (20 *(b-1))+ (20*(e-1))},
					Size = { 40, 18 },
				}
			end
		end
    end
	for c=1,e,1 do
	
		if(props["Draw Router"].Value == "True") then
			table.insert(graphics,{
				Type = "Text",
				Text = tostring(c),
				Position = { 0,65 + (20 *(c-1))},
				HTextAlign = "Center",
				TextSize = 14,
				Size = { 30, 10 },
			})
		end
		if( z > 0) then
			table.insert(graphics,{
				Type = "Text",
				Text = tostring(c),
				Position = { 0,(20 *(c-1)) + 130 + (20 *(e))+(20*(m))},
				HTextAlign = "Center",
				TextSize = 14,
				Size = { 30, 10 },
			})
		end
	end
	for c=1,m,1 do
		table.insert(graphics,{
			Type = "Text",
			Text = tostring(c),
			Position = { 0,(20 *(c-1)) + 80+ (20 *(e))},
			HTextAlign = "Center",
			TextSize = 14,
			Size = { 30, 10 },
		})
	end
  elseif(CurrentPage=="Setup") then
    local i_count, j_count, k_count,l_count = props["Number of encoders"].Value, props["Number of decoders"].Value, props["Number of zones"].Value,props["Number of multiviews"].Value
    table.insert(graphics,{
		Type = "Text",
		Text = "ENCODER SETUP",
		Position = { 0, 20},
		HTextAlign = "Left",
		TextSize = 14,
		IsBold = true,
		Size = { 150, 40 },
	})
	
    for i=1,i_count do 
		layout["sourceName"..tostring(i_count==1 and "" or " "..i)] =
		{
			PrettyName = string.format("Encoder~%i",i), -- The Tilde (~) creates a folder break for the Control Pin list
			Style = "Text",
			Position = { 100, 60 + (30 *(i-1)) },
			Size = { 128, 20 },
		}
		layout["joinType"..tostring(i_count==1 and "" or " "..i)] =
		{
			PrettyName = string.format("Encoder Join Type~%i",i), -- The Tilde (~) creates a folder break for the Control Pin list
			Style = "ComboBox",
			Position = { 320, 60 + (30 *(i-1)) },
			Size = { 128, 20 },
			TextFontSize = 14,
		}
		table.insert(graphics,{
			Type = "Text",
			Text = "Encoder " .. i .. " Name:",
			Position = { 0, 60 + (30 *(i-1)) },
			Size = { 100, 20 },
		})
		table.insert(graphics,{
			Type = "Text",
			Text = "Join Type:",
			Position = { 230, 60 + (30 *(i-1)) },
			Size = { 100, 20 },
		})
    end
    table.insert(graphics,{
			Type = "Text",
			Text = "DECODER SETUP",
			Position = { 0, 80 + (30 * (i_count))},
			HTextAlign = "Left",
			TextSize = 14,
			IsBold = true,
			Size = { 150, 40 },
		})
    for i=1,j_count do 
		layout["displayName"..tostring(j_count==1 and "" or " "..i)] =
		{
			PrettyName = string.format("Decoder~%i",i), -- The Tilde (~) creates a folder break for the Control Pin list
			Style = "Text",
			Position = { 100, 120 + (30 * (i_count)) + (30 *(i-1)) },
			Size = { 128, 20 },
		}
		table.insert(graphics,{
			Type = "Text",
			Text = "Decoder " .. i .. " Name:",
			Position = { 0, 120 + (30 * (i_count)) + (30 *(i-1)) },
			Size = { 100, 20 },
		})
    end
	if k_count > 0 then
		table.insert(graphics,{
				Type = "Text",
				Text = "ZONES SETUP",
				Position = { 0, 140 + (30 * (i_count)) + (30 * (j_count))},
				HTextAlign = "Left",
				TextSize = 14,
				IsBold = true,
				Size = { 150, 40 },
			})
		for i=1,k_count do 
			layout["zoneName"..tostring(k_count==1 and "" or " "..i)] =
			{
				PrettyName = string.format("Zone~%i",i), -- The Tilde (~) creates a folder break for the Control Pin list
				Style = "Text",
				Position = { 100, 180 + (30 * (i_count)) + (30 * (j_count)) + (30 *(i-1))},
				Size = { 128, 20 },
			}
			table.insert(graphics,{
				Type = "Text",
				Text = "Zone " .. i .. " Name:",
				Position = { 0, 180 + (30 * (i_count)) + (30 * (j_count)) + (30 *(i-1))},
				Size = { 100, 20 },
			})
		end
		table.insert(graphics,{
				Type = "Text",
				Text = "MULTIVIEW SETUP",
				Position = { 0, 180 + (30 * (i_count)) + (30 * (j_count))+30*(k_count)},
				HTextAlign = "Left",
				TextSize = 14,
				IsBold = true,
				Size = { 150, 40 },
			})
		for i=1,l_count do
			layout["multiviewNames"..tostring(l_count==1 and "" or " "..i)] =
			{
				PrettyName = string.format("Multiview~%i",i), -- The Tilde (~) creates a folder break for the Control Pin list
				Style = "Text",
				Position = { 100, 220 + (30 * (i_count)) + (30 * (j_count)) +30*(k_count)+ (30 *(i-1))},
				Size = { 128, 20 },
			}
			table.insert(graphics,{
				Type = "Text",
				Text = "Multiview " .. i .. " Name:",
				Position = { 0, 220 + (30 * (i_count)) + (30 * (j_count)) +30*(k_count)+ (30 *(i-1))},
				Size = { 100, 20 },
			})
		end
		table.insert(graphics,{
			Type = "Text",
			Text = "DEVICE STATUS",
			Position = { 0, 160 + (30 * (i_count)) + (30 * (j_count)) + (30 *(k_count))+ (30 *(l_count)) + 80},
			HTextAlign = "Left",
			TextSize = 14,
			IsBold = true,
			Size = { 150, 40 },
		})
		layout["Status"] =
		{
		  PrettyName = "Device Status",
		  Color = White,
		  Style = "Textbox",
		  Position = { 0, 200 + (30 * (i_count)) + (30 * (j_count)) + (30 *(k_count))+ (30 *(l_count)) + 80},
		  Size = { 230, 20 },
		  TextBoxStyle = "Normal",
		  TextFontSize = 12,
		}
		table.insert(graphics,{
			Type = "Text",
			Text = "IP ADDRESS",
			Position = { 0, 240 + (30 * (i_count)) + (30 * (j_count)) + (30 *(k_count))+ (30 *(l_count)) + 80},
			HTextAlign = "Left",
			TextSize = 14,
			IsBold = true,
			Size = { 150, 40 },
		})
		layout["ipAddress"] =
		{
		  PrettyName = "IP Address",
		  Color = White,
		  Style = "Textbox",
		  Position = { 0, 280 + (30 * (i_count)) + (30 * (j_count)) + (30 *(k_count))+ (30 *(l_count)) + 80},
		  Size = { 230, 20 },
		  TextBoxStyle = "Normal",
		  TextFontSize = 12,
		  Value = PluginInfo.devEnvironment == true and "172.16.16.118" or ""
		}
		table.insert(graphics,{
			Type = "Text",
			Text = "PORT",
			Position = { 0, 320 + (30 * (i_count)) + (30 * (j_count)) + (30 *(k_count))+ (30 *(l_count)) + 80},
			HTextAlign = "Left",
			TextSize = 14,
			IsBold = true,
			Size = { 150, 40 },
		})
		layout["port"] =
		{
		  PrettyName = "Port",
		  Color = White,
		  Style = "Textbox",
		  Position = { 0, 360 + (30 * (i_count)) + (30 * (j_count)) + (30 *(k_count))+ (30 *(l_count)) + 80},
		  Size = { 230, 20 },
		  TextBoxStyle = "Normal",
		  TextFontSize = 12,
		  Value = PluginInfo.devEnvironment == true and "172.16.16.118" or ""
		}
    
	
		table.insert(graphics,{
			Type = "Image",
			Image = LOGO.IMAGE,
			Position = { 270, 150 + (30 * (i_count)) + (30 * (j_count)) + (30 *(k_count))+ (30 *(l_count)) + 80},
			Size = LOGO.SIZE
		})
	end
  end
  return layout, graphics
end

function GetPins(props)
	local pins = {}
	return pins
end

function GetComponents(props)
end

function GetWiring(props)
	local wiring = {}
	return wiring
end

ZEEVEE = {
	HEADERS = {
		['Content-Type'] = "application/x-www-form-urlencoded"
	},
	MAX_INPUTS = 100,
	MAX_OUTPUTS = 100,
	MAX_ZONES = 100,
}

function ZEEVEE.INIT()
	if(string.len(Controls["ipAddress"].String) > 0) then
		DEBUG.SET_DEBUG_PRINT(Properties["Debug Print"].Value)
		DEBUG.FUNCTION("ZEEVEE.INIT")
		DEBUG.FUNCTION("TEST: " .. Properties["IP Address"].Value)
		ZEEVEE.MAX_INPUTS = tonumber(Properties["Number of encoders"].Value)
		ZEEVEE.MAX_OUTPUTS = tonumber(Properties["Number of decoders"].Value)
		ZEEVEE.MAX_ZONES = tonumber(Properties["Number of zones"].Value)
		ZEEVEE.MAX_MULTIVIEW = tonumber(Properties["Number of multiviews"].Value)
		ZEEVEE.MAX_WINDOWS = tonumber(6)
		ZEEVEE.ENDPOINT = "http://" .. Properties["IP Address"].Value .. ":" .. Controls["port"].String .. "/rcCmd.php"
		ZEEVEE.POSTDATA = "commands=authenticate username " .. Properties["Username"].Value .. " password " .. Properties["Password"].Value .. " token none newPassword none\n"
		Controls.preset.EventHandler = function()
				local cmd = "run preset \"" .. Controls.preset.String .. "\""
				DEBUG.TX("Sending run preset \"" .. Controls.preset.String .. "\"")
				HttpClient.Upload {
					Url = ZEEVEE.ENDPOINT,
					Method = "POST",
					Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+") .. "\n logout",
					Headers = ZEEVEE.HEADERS,
					EventHandler = ZEEVEE.PROCESS_GENERIC
			  }
			  Controls.preset.String = "" --clear string after sending
			  end

		for a=1,tonumber(ZEEVEE.MAX_OUTPUTS),1 do
			if(tonumber(ZEEVEE.MAX_OUTPUTS) == 1) then
				Controls["CurrentInput"].EventHandler = function()
						local ci = tonumber(Controls.CurrentInput.String)
						local jt = ZEEVEE.MAX_INPUTS > 1 and Controls.joinType[ci].String or Controls.joinType.String
						if(ci > 0) then
							cmd = "join " .. (ci > 0 and Controls.sourceName[ci].String or "none") .. " " .. Controls.displayName.String .. " " .. jt
						end
						DEBUG.TX("Sending Join Command: " .. cmd)
						HttpClient.Upload {
							Url = ZEEVEE.ENDPOINT,
							Method = "POST",
							Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
							Headers = ZEEVEE.HEADERS,
							EventHandler = ZEEVEE.PROCESS_GENERIC
					  }
				end
			else
				Controls["CurrentInput"][a].EventHandler = function()
					if(tonumber(Controls.CurrentInput[a].String) > ZEEVEE.MAX_INPUTS) then
						Controls.CurrentInput[a].String = ZEEVEE.MAX_INPUTS
					elseif(tonumber(Controls.CurrentInput[a].String) < 0) then
						Controls.CurrentInput[a].String = 0
					end
					cmd = "join " .. (tonumber(Controls.CurrentInput[a].String) > 0 and Controls.sourceName[tonumber(Controls.CurrentInput[a].String)].String or "none") .. " " .. (Controls.displayName.String or Controls.displayName[a].String) .. " " .. (tonumber(Controls.CurrentInput[a].String) > 0 and (Controls.joinType.String or Controls.joinType[tonumber(Controls.CurrentInput[a].String)].String) or "")
					DEBUG.TX("Sending Join Command: " .. cmd)
					HttpClient.Upload {
						Url = ZEEVEE.ENDPOINT,
						Method = "POST",
						Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
						Headers = ZEEVEE.HEADERS,
						EventHandler = ZEEVEE.PROCESS_GENERIC
				  }
				end
			end
			Controls["Send_Output_" .. a .. "_RS232"].EventHandler = function()
				local cmd = "send " .. (type(Controls.displayName) == "table" and Controls.displayName[a].String or Controls.displayName.String) .. " rs232 \"" .. Controls["Send_Output_" .. a .. "_RS232"].String .. "\""
				DEBUG.TX("Sending " .. (type(Controls.displayName) == "table" and Controls.displayName[a].String or Controls.displayName.String) .. " RS232 command: " .. Controls["Send_Output_" .. a .. "_RS232"].String)
				HttpClient.Upload {
					Url = ZEEVEE.ENDPOINT,
					Method = "POST",
					Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
					Headers = ZEEVEE.HEADERS,
					EventHandler = ZEEVEE.PROCESS_GENERIC
			  }
			  Controls["Send_Output_" .. a .. "_RS232"].String = "" --clear string after sending
			end
			Controls["Send_Output_" .. a .. "_IR"].EventHandler = function()
				local cmd = "send " .. (type(Controls.displayName) == "table" and Controls.displayName[a].String or Controls.displayName.String) .. " ir \"" .. Controls["Send_Output_" .. a .. "_IR"].String .. "\""
				DEBUG.TX("Sending " .. (type(Controls.displayName) == "table" and Controls.displayName[a].String or Controls.displayName.String) .. " IR command: " .. Controls["Send_Output_" .. a .. "_IR"].String)
				HttpClient.Upload {
					Url = ZEEVEE.ENDPOINT,
					Method = "POST",
					Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
					Headers = ZEEVEE.HEADERS,
					EventHandler = ZEEVEE.PROCESS_GENERIC
			  }
			  Controls["Send_Output_" .. a .. "_IR"].String = "" --clear string after sending
			end
			Controls["Send_Output_" .. a .. "_CEC_HEX"].EventHandler = function()
				local cmd = "send " .. (type(Controls.displayName) == "table" and Controls.displayName[a].String or Controls.displayName.String) .. " cec \"" .. Controls["Send_Output_" .. a .. "_CEC_HEX"].String .. "\""
				DEBUG.TX("Sending " .. (type(Controls.displayName) == "table" and Controls.displayName[a].String or Controls.displayName.String) .. " CEC command: " .. Controls["Send_Output_" .. a .. "_CEC_HEX"].String)
				HttpClient.Upload {
					Url = ZEEVEE.ENDPOINT,
					Method = "POST",
					Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
					Headers = ZEEVEE.HEADERS,
					EventHandler = ZEEVEE.PROCESS_GENERIC
			  }
			  Controls["Send_Output_" .. a .. "_CEC_HEX"].String = "" --clear string after sending
			end
			Controls["Send_Output_" .. a .. "_CEC_ON"].EventHandler = function()
				local cmd = "send " .. (type(Controls.displayName) == "table" and Controls.displayName[a].String or Controls.displayName.String) .. " cec on"
				DEBUG.TX("Sending " .. (type(Controls.displayName) == "table" and Controls.displayName[a].String or Controls.displayName.String) .. " CEC on command")
				HttpClient.Upload {
					Url = ZEEVEE.ENDPOINT,
					Method = "POST",
					Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
					Headers = ZEEVEE.HEADERS,
					EventHandler = ZEEVEE.PROCESS_GENERIC
			  }
			end
			Controls["Send_Output_" .. a .. "_CEC_OFF"].EventHandler = function()
				local cmd = "send " .. (type(Controls.displayName) == "table" and Controls.displayName[a].String or Controls.displayName.String) .. " cec off"
				DEBUG.TX("Sending " .. (type(Controls.displayName) == "table" and Controls.displayName[a].String or Controls.displayName.String) .. " CEC off command")
				HttpClient.Upload {
					Url = ZEEVEE.ENDPOINT,
					Method = "POST",
					Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
					Headers = ZEEVEE.HEADERS,
					EventHandler = ZEEVEE.PROCESS_GENERIC
			  }
			end
		end
		if(tonumber(ZEEVEE.MAX_INPUTS) == 1) then
			Controls["joinType"].Choices = {"analog-audio","fast-switched","genlocked-scale","hdmi-downmix-audio","usb","analogAudio","hdmiAudio","multiview","videoWall","fastSwitched","genlocked","genlockedScaled","manual"}
			if(Controls["joinType"].String == "") then Controls["joinType"].String = "fast-switched" end
		else
			for a=1,tonumber(ZEEVEE.MAX_INPUTS),1 do
				Controls["Send_Input_" .. a .. "_RS232"].EventHandler = function()
					local cmd = "send " .. (type(Controls.sourceName) == "table" and Controls.sourceName[a].String or Controls.sourceName.String) .. " rs232 \"" .. Controls["Send_Input_" .. a .. "_RS232"].String .. "\""
					DEBUG.TX("Sending " .. (type(Controls.sourceName) == "table" and Controls.sourceName[a].String or Controls.sourceName.String) .. " RS232 command: " .. Controls["Send_Input_" .. a .. "_RS232"].String)
					HttpClient.Upload {
						Url = ZEEVEE.ENDPOINT,
						Method = "POST",
						Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
						Headers = ZEEVEE.HEADERS,
						EventHandler = ZEEVEE.PROCESS_GENERIC
				  }
				end
				Controls["Send_Input_" .. a .. "_IR"].EventHandler = function()
					local cmd = "send " .. (type(Controls.sourceName) == "table" and Controls.sourceName[a].String or Controls.sourceName.String) .. " ir \"" .. Controls["Send_Input_" .. a .. "_IR"].String .. "\""
					DEBUG.TX("Sending " .. (type(Controls.sourceName) == "table" and Controls.sourceName[a].String or Controls.sourceName.String) .. " IR command: " .. Controls["Send_Input_" .. a .. "_IR"].String)
					HttpClient.Upload {
						Url = ZEEVEE.ENDPOINT,
						Method = "POST",
						Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
						Headers = ZEEVEE.HEADERS,
						EventHandler = ZEEVEE.PROCESS_GENERIC
				  }
				end
				if(Controls["joinType"][a] ~= nil) then
					Controls["joinType"][a].Choices = {"analog-audio","fast-switched","genlocked-scale","hdmi-downmix-audio","usb","analogAudio","hdmiAudio","multiview","videoWall","fastSwitched","genlocked","genlockedScaled","manual"}
					if(Controls["joinType"][a].String == "") then Controls["joinType"][a].String = "fast-switched" end
				end
			end
		end
		pollTimer = Timer.New()
		pollTimer.EventHandler = ZEEVEE.GET_DEVICE_CONFIG
		pollTimer:Start(10)
		Controls["videowallSet"].EventHandler = ZEEVEE.SET_VIDEO_WALL
		Controls["multiviewSet"].EventHandler = ZEEVEE.SET_MULTIVIEW
		for input=1,ZEEVEE.MAX_INPUTS,1 do
			for output=1,ZEEVEE.MAX_OUTPUTS,1 do
				if(Controls["Join_Output_" .. output .. "_Input_" .. input] ~= nil) then
					Controls["Join_Output_" .. output .. "_Input_" .. input].EventHandler = function()
						local cmd = "join none " .. (Controls.displayName.String or Controls.displayName[output].String) .. " " .. (Controls.joinType.String or Controls.joinType[input].String or "fast-switched")
						if(tonumber(Controls["Join_Output_" .. output .. "_Input_" .. input].Value) >= 1) then
							cmd = "join " .. (type(Controls.sourceName) == "table" and Controls.sourceName[input].String or Controls.sourceName.String) .. " " .. (type(Controls.displayName) == "table" and Controls.displayName[output].String or Controls.displayName.String) .. " " .. (type(Controls.joinType) == "table" and Controls.joinType[input].String or Controls.joinType.String or "fast-switched")
						end
						DEBUG.TX("Sending Join Command: " .. cmd)
						HttpClient.Upload {
							Url = ZEEVEE.ENDPOINT,
							Method = "POST",
							Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
							Headers = ZEEVEE.HEADERS,
							EventHandler = ZEEVEE.PROCESS_GENERIC
					  }
					end
				end
			end
			for zone=1,ZEEVEE.MAX_ZONES,1 do
				if(Controls["Join_Zone_" .. zone .. "_Input_" .. input] ~= nil) then
					Controls["Join_Zone_" .. zone .. "_Input_" .. input].EventHandler = function()
						local cmd = "join none " .. (type(Controls.zoneName) == "table" and Controls.zoneName[zone].String or Controls.zoneName.String) .. " " .. (type(Controls.joinType) == "table" and Controls.joinType[input].String or Controls.joinType.String or "fast-switched")
						if(tonumber(Controls["Join_Zone_" .. zone .. "_Input_" .. input].Value) >= 1) then
							cmd = "join " .. (Controls.sourceName[input] ~= nil and Controls.sourceName[input].String or Controls.sourceName.String) .. " \"" .. (Controls.zoneName[zone] ~= nil and Controls.zoneName[zone].String or Controls.zoneName.String) .. "\" " .. (Controls.joinType[input] ~= nil and Controls.joinType[input].String or Controls.joinType.String or "fast-switched")
						end
						DEBUG.TX("Sending Zone Join Command: " .. cmd)
						HttpClient.Upload {
							Url = ZEEVEE.ENDPOINT,
							Method = "POST",
							Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
							Headers = ZEEVEE.HEADERS,
							EventHandler = ZEEVEE.PROCESS_GENERIC
					  }
					end
				end
			end
		end

		for multiview=1,ZEEVEE.MAX_MULTIVIEW,1 do
			for output=1,ZEEVEE.MAX_OUTPUTS,1 do
				if(Controls["Join_Output_"..output.."_Multiview_"..multiview] ~= nil) then
					Controls["Join_Output_"..output.."_Multiview_"..multiview].EventHandler = function()
						local cmd = "join " .. Controls.multiviewNames[multiview].String .." ".. Controls.displayName[output].String .. " multiview"
						DEBUG.TX("Sending Multiview Join Command: " .. cmd)
						HttpClient.Upload {
							Url = ZEEVEE.ENDPOINT,
							Method = "POST",
							Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
							Headers = ZEEVEE.HEADERS,
							EventHandler = ZEEVEE.PROCESS_GENERIC
						}
					end
				end
			end
			for window=1,ZEEVEE.MAX_WINDOWS,1 do
				local location = "Join_Multiview_"..multiview.."_Window_"..window
				if(Controls[location] ~= nil) then
					Controls[location].EventHandler = function()
						local encoderNum = Controls[location].String
						local encoderName = Controls.sourceName[tonumber(encoderNum)].String
						local squareToChange = "multiview " .. Controls.multiviewNames[multiview].String .. " windowNumber " .. window
						local cmd = "set ".. squareToChange .. " newEncoderName " .. encoderName
						DEBUG.TX("Sending Multiview Window Set Command: " .. cmd)
						HttpClient.Upload {
							Url = ZEEVEE.ENDPOINT,
							Method = "POST",
							Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
							Headers = ZEEVEE.HEADERS,
							EventHandler = ZEEVEE.PROCESS_GENERIC
						}
					end
				end
			end
		end

		if(Properties["Auto Setup"].Value == true) then
			ZEEVEE.AUTO_SETUP()
			ZEEVEE.AUTO_ZONE_SETUP()
			ZEEVEE.AUTO_MULTIVIEW_SETUP()
			Properties["Auto Setup"].Value = false
		else
			ZEEVEE.GET_DEVICE_CONFIG()
		end
	end
end

function ZEEVEE.AUTO_SETUP()
	DEBUG.FUNCTION("ZEEVEE.AUTO_SETUP")
	local cmd = "show device status all"
	HttpClient.Upload {
		Url = ZEEVEE.ENDPOINT,
		Method = "POST",
		Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
		Headers = ZEEVEE.HEADERS,
		EventHandler = ZEEVEE.PROCESS_AUTO_SETUP
  }
end

function ZEEVEE.AUTO_MULTIVIEW_SETUP()
	DEBUG.FUNCTION("ZEEVEE.AUTO_SETUP")
	local cmd = "show multiviews status"
	HttpClient.Upload {
		Url = ZEEVEE.ENDPOINT,
		Method = "POST",
		Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
		Headers = ZEEVEE.HEADERS,
		EventHandler = ZEEVEE.PROCESS_AUTO_MULTIVIEW_SETUP
  }
end

function ZEEVEE.AUTO_ZONE_SETUP()
	DEBUG.FUNCTION("ZEEVEE.AUTO_ZONE_SETUP")
	local cmd = "show zones"
	HttpClient.Upload {
		Url = ZEEVEE.ENDPOINT,
		Method = "POST",
		Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
		Headers = ZEEVEE.HEADERS,
		EventHandler = ZEEVEE.PROCESS_AUTO_ZONE_SETUP
  }
end

function ZEEVEE.PROCESS_AUTO_MULTIVIEW_SETUP(tbl, code, data, err, headers)
	DEBUG.FUNCTION("ZEEVEE.PROCESS_AUTO_MULTIVIEW_SETUP")
	DEBUG.RX(string.format("RX (%s): %s",code or 0, data or ""))
	if(code == 200) then
		ZEEVEE.REPORT_STATUS("OK")
		local o,multiview = rapidjson.decode(data),0
		local multiviews = {}
		if(o.status == "Success") then
			for _,response in pairs(o.responses) do
				if(response.text ~= nil) then
					for _,device in pairs(response.text) do

						if(device.gen ~= nil) then
							multiview = multiview + 1
							DEBUG.FUNCTION("FOUND MultiView: " .. device.gen.name)
							table.insert(multiviews,device.gen.name)
							if(tonumber(ZEEVEE.MAX_MULTIVIEW) > 1 and multiview <= tonumber(ZEEVEE.MAX_MULTIVIEW)) then
								Controls["multiviewNames"][multiview].String = device.gen.name
							else
								Controls["multiviewNames"].String = device.gen.name
							end						
						end
					end
				end
			end
		else
			DEBUG.FUNCTION("COMMAND FAILURE")
		end
	elseif code == 401.0 or Properties["IP Address"].Value == "" then  -- Invalid Address handler
		ZEEVEE.REPORT_STATUS("MISSING", "Check IP Address") 
	else
		ZEEVEE.REPORT_STATUS("MISSING",err)
	end

end

function ZEEVEE.PROCESS_AUTO_SETUP(tbl, code, data, err, headers)
	DEBUG.FUNCTION("ZEEVEE.PROCESS_AUTO_SETUP")
	DEBUG.RX(string.format("RX (%s): %s",code or 0, data or ""))
	if(code == 200) then
		ZEEVEE.REPORT_STATUS("OK")
		local o,encoder,decoder,encoders,decoders = rapidjson.decode(data),0,0,{}, {}
		if(o.status == "Success") then
			for _,response in pairs(o.responses) do
				if(response.text ~= nil) then
					for _,device in pairs(response.text) do
						if(device.gen ~= nil) then
							if(device.gen.type == "encoder") then
								encoder = encoder + 1
								DEBUG.FUNCTION("FOUND ENCODER: " .. device.gen.name)
								table.insert(encoders,device.gen.name)
								if(tonumber(ZEEVEE.MAX_INPUTS) > 1 and encoder <= tonumber(ZEEVEE.MAX_INPUTS)) then
									Controls["sourceName"][encoder].String = device.gen.name
								else
									Controls["sourceName"].String = device.gen.name
								end
							elseif(device.gen.type == "decoder") then
								decoder = decoder + 1
								DEBUG.FUNCTION("FOUND DECODER: " .. device.gen.name)
								table.insert(decoders,device.gen.name)
								if(tonumber(ZEEVEE.MAX_OUTPUTS) > 1 and decoder <= tonumber(ZEEVEE.MAX_OUTPUTS)) then
									Controls["displayName"][decoder].String = device.gen.name
								else
									Controls["displayName"].String = device.gen.name
								end
							end
						end
					end
				end
			end
			Controls["videowallEncoder"].Choices = encoders
			Controls["multiviewDecoder"].Choices = decoders
			ZEEVEE.SHOW_VIDEO_WALLS()
		else
			DEBUG.FUNCTION("COMMAND FAILURE")
		end
	elseif code == 401.0 or Properties["IP Address"].Value == "" then  -- Invalid Address handler
		ZEEVEE.REPORT_STATUS("MISSING", "Check IP Address") 
	else
		ZEEVEE.REPORT_STATUS("MISSING",err)
	end
end

function ZEEVEE.PROCESS_AUTO_ZONE_SETUP(tbl, code, data, err, headers)
	DEBUG.FUNCTION("ZEEVEE.PROCESS_AUTO_ZONE_SETUP")
	DEBUG.RX(string.format("RX (%s): %s",code or 0, data or ""))
	if(code == 200) then
		ZEEVEE.REPORT_STATUS("OK")
		local o,zone,zones = rapidjson.decode(data),0,{}
		if(o.status == "Success") then
			for _,response in pairs(o.responses) do
				if(response.text ~= nil) then
					for _,device in pairs(response.text) do
						if(device.gen ~= nil) then
							zone = zone + 1
							DEBUG.FUNCTION("FOUND ZONE: " .. device.gen.name)
							table.insert(zones,device.gen.name)
							if(tonumber(ZEEVEE.MAX_ZONES) > 1) then
								Controls["zoneName"][zone].String = device.gen.name
							else
								Controls["zoneName"].String = device.gen.name
							end
						end
						zones,zone = ZEEVEE.PROCESS_SUB_ZONE_SETUP(zones,zone,device,device.gen.name)
					end
				end
			end
		else
			DEBUG.FUNCTION("COMMAND FAILURE")
		end
	elseif code == 401.0 or Controls["ipAddress"].String == "" then  -- Invalid Address handler
		ZEEVEE.REPORT_STATUS("MISSING", "Check IP Address") 
	else
		ZEEVEE.REPORT_STATUS("MISSING",err)
	end
end

function ZEEVEE.PROCESS_SUB_ZONE_SETUP(zones,zone,device,deviceName)
	DEBUG.FUNCTION("ZEEVEE.PROCESS_SUB_ZONE_SETUP")
	--DEBUG.FUNCTION(zone,device,deviceName)
	for zoneName,zoneTable in pairs(device) do
		if(zoneName ~= "gen" and zoneName ~= "displays") then
			zone = zone + 1
			DEBUG.FUNCTION("FOUND ZONE: " .. zoneName)
			table.insert(zones,zoneName)
			Controls["zoneName"][zone].String = deviceName .. "." .. zoneName
			ZEEVEE.PROCESS_SUB_ZONE_SETUP(zones,zone,zoneTable, deviceName .. "." .. zoneName) --keep going down this rabbit hole.
		end
	end
	return zones,zone
end

function ZEEVEE.SHOW_MULTIVIEWS_STATUS()
	DEBUG.FUNCTION("ZEEVEE.SHOW_MULTIVIEWS_STATUS")
	local cmd = "show multiviews status"
	HttpClient.Upload {
		Url = ZEEVEE.ENDPOINT,
		Method = "POST",
		Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
		Headers = ZEEVEE.HEADERS,
		EventHandler = ZEEVEE.PROCESS_MULTIVIEWS_STATUS
  }
end

function ZEEVEE.PROCESS_MULTIVIEWS_STATUS(tbl, code, data, err, headers)
	DEBUG.FUNCTION("ZEEVEE.PROCESS_MULTIVIEWS_STATUS")
	DEBUG.RX(string.format("RX (%s): %s",code or 0, data or ""))
	local o
	local mvNames = {}
	local mvCount = 0
	if(code == 200) then
		ZEEVEE.REPORT_STATUS("OK")
		o = rapidjson.decode(data)
		if(o.status ~= "Success") then 
			ZEEVEE.REPORT_STATUS("Unsuccessful",err)
			return
		end
	elseif code == 401.0 or Controls["ipAddress"].String == "" then  -- Invalid Address handler
		ZEEVEE.REPORT_STATUS("MISSING", "Check IP Address") 
		return
	else
		ZEEVEE.REPORT_STATUS("MISSING",err)
		return
	end
	
	for _,response in pairs(o.responses) do
		if(response.text ~= nil) then
			for _,text in pairs(response.text) do
				if(text.gen ~= nil) then
					if(text.gen.name ~= nil) then
						table.insert(mvNames,text.gen.name)
						mvCount = mvCount + 1
						windowIndex = 0
						for _,window in pairs(text.window) do
							windowIndex = windowIndex + 1
							Controls["Join_Multiview_"..mvCount.."_Window_".. windowIndex ].String = 0
							for input=1,ZEEVEE.MAX_INPUTS do
								if window.encoderName == Controls["sourceName"][input].String then
									Controls["Join_Multiview_"..mvCount.."_Window_".. windowIndex ].String = input
								end
							end
						end
					end
				end
			end
		end
	end
	Controls["multiviewNames"].Choices = mvNames
	ZEEVEE.GET_DEVICE_CONFIG()
	return
end

function ZEEVEE.SHOW_VIDEO_WALLS()
	DEBUG.FUNCTION("ZEEVEE.SHOW_VIDEO_WALLS")
	local cmd = "show video-walls"
	HttpClient.Upload {
		Url = ZEEVEE.ENDPOINT,
		Method = "POST",
		Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
		Headers = ZEEVEE.HEADERS,
		EventHandler = ZEEVEE.PROCESS_SHOW_VIDEO_WALLS
  }
end

function ZEEVEE.PROCESS_SHOW_VIDEO_WALLS(tbl, code, data, err, headers)
	DEBUG.FUNCTION("ZEEVEE.PROCESS_SHOW_VIDEO_WALLS")
	DEBUG.RX(string.format("RX (%s): %s",code or 0, data or ""))
	if(code == 200) then
		ZEEVEE.REPORT_STATUS("OK")
		local vwNames = {}
		local o = rapidjson.decode(data)
		if(o.status == "Success") then
			for _,response in pairs(o.responses) do
				if(response.text ~= nil) then
					for _,text in pairs(response.text) do
						if(text.gen ~= nil) then
							if(text.gen.name ~= nil) then
								table.insert(vwNames,text.gen.name)
							end
						end
					end
				end
			end
		end
		Controls["videowallWallName"].Choices = vwNames
		ZEEVEE.SHOW_MULTIVIEWS_STATUS()
	elseif code == 401.0 or Controls["ipAddress"].String == "" then  -- Invalid Address handler
		ZEEVEE.REPORT_STATUS("MISSING", "Check IP Address") 
	else
		ZEEVEE.REPORT_STATUS("MISSING",err)
	end
end

function ZEEVEE.GET_DEVICE_CONFIG()
	DEBUG.FUNCTION("ZEEVEE.GET_DEVICE_CONFIG")
	local cmd = "show device config decoders"
	HttpClient.Upload {
		Url = ZEEVEE.ENDPOINT,
		Method = "POST",
		Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
		Headers = ZEEVEE.HEADERS,
		EventHandler = ZEEVEE.PROCESS_CONFIG
  }
end

function ZEEVEE.SET_PRESET()
	DEBUG.FUNCTION("ZEEVEE.SET_PRESET")
	local cmd = "run preset \"" .. Controls.preset.String .. "\""
	DEBUG.TX("Sending Command: " .. cmd)
	HttpClient.Upload {
		Url = ZEEVEE.ENDPOINT,
		Method = "POST",
		Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
		Headers = ZEEVEE.HEADERS,
		EventHandler = ZEEVEE.PROCESS_GENERIC
  }
end

function ZEEVEE.SET_VIDEO_WALL()
	DEBUG.FUNCTION("ZEEVEE.SET_VIDEO_WALL")
	local cmd = "set video-wall-encoder " .. Controls.videowallEncoder.String .. " \"" .. Controls.videowallWallName.String .. "\""
	DEBUG.TX("Sending Command: " .. cmd)
	HttpClient.Upload {
		Url = ZEEVEE.ENDPOINT,
		Method = "POST",
		Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
		Headers = ZEEVEE.HEADERS,
		EventHandler = ZEEVEE.PROCESS_GENERIC
  }
end

function ZEEVEE.SET_MULTIVIEW(input,output)
	DEBUG.FUNCTION("ZEEVEE.SET_MULTIVIEW")
	local cmd = "join \"" .. (Controls.multiviewNames.String or Controls.multiviewNames[input].String) .. "\" " .. (Controls.Output.String or Controls.Output[output].String) .. " multiview"
	DEBUG.TX("Sending Command: " .. cmd)
	HttpClient.Upload {
		Url = ZEEVEE.ENDPOINT,
		Method = "POST",
		Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
		Headers = ZEEVEE.HEADERS,
		EventHandler = ZEEVEE.PROCESS_GENERIC
  }
end

function ZEEVEE.PROCESS_CONFIG(tbl, code, data, err, headers)
	DEBUG.FUNCTION("ZEEVEE.PROCESS_CONFIG")
	DEBUG.RX(string.format("RX (%s): %s",code or 0, data or ""))
	local o = rapidjson.decode(data)
	if(code == 200) then
		ZEEVEE.REPORT_STATUS("OK")
		if(o.status ~= "Success") then
			DEBUG.FUNCTION("COMMAND FAILURE")
			return
		end
	elseif code == 401.0 or Controls["ipAddress"].String == "" then  -- Invalid Address handler
		ZEEVEE.REPORT_STATUS("MISSING", "Check IP Address")
		return
	else
		ZEEVEE.REPORT_STATUS("MISSING",err)
		return
	end
	
	for _,response in pairs(o.responses) do
		if(response.text ~= nil) then
			for _,text in pairs(response.text) do
				local decoderName, encoderName = "",""
				if(text.gen ~= nil) then
					decoderName = text.gen.name
				end
				if(text.connectedEncoder ~= nil) then
					encoderName = text.connectedEncoder.name
				end
				if(encoderName == "" or decoderName == "") then return end

				if( tonumber(ZEEVEE.MAX_OUTPUTS) == 1) then
					if(Controls["displayName"].String == decoderName) then
						Controls["CurrentInput"].String = 0
						for a = 1, ZEEVEE.MAX_INPUTS do
							ZEEVEE.PROCESS_SUB_INPUT(a,1,encoderName)
						end
						for a = 1, ZEEVEE.MAX_MULTIVIEW do
							ZEEVEE.PROCESS_SUB_MULTIVIEW(a,1,encoderName)
						end
					end
				else
					for b = 1, ZEEVEE.MAX_OUTPUTS do
						if(Controls["displayName"][b].String == decoderName) then
							Controls["CurrentInput"][b].String = 0
							for a = 1, ZEEVEE.MAX_INPUTS do
								ZEEVEE.PROCESS_SUB_INPUT(a,b,encoderName)
							end
							
							for a = 1,ZEEVEE.MAX_MULTIVIEW do
								ZEEVEE.PROCESS_SUB_MULTIVIEW(a,b,encoderName)
							end
						end
					end
				end
			end
		end
	end
end


function ZEEVEE.PROCESS_SUB_INPUT(input,output,encoderName)
	local flag = 0
	if(ZEEVEE.MAX_INPUTS == 1) then
		flag = (Controls["sourceName"].String == encoderName)
		Controls["CurrentInput"].String = flag and 1 or 0
	else
		flag = (Controls["sourceName"][input].String == encoderName)
		if(flag) then 
			Controls["CurrentInput"][output].String = tostring(input)
			print("Found output "..output.." input "..input)
		end
	end
	Controls["Join_Output_"..output.."_Input_"..input].Value = flag
	return flag
end

function ZEEVEE.PROCESS_SUB_MULTIVIEW(input, output, encoderName)
	local flag = 0
	if(ZEEVEE.MAX_MULTIVIEW == 1) then
		flag = (Controls["multiviewNames"].String == encoderName) and 1 or 0
		if(flag) then
			Controls["CurrentInput"].String = "M"..input
		end
	else
		flag = (Controls["multiviewNames"][input].String == encoderName)
		if(flag) then
			Controls["CurrentInput"][output].String = "M"..input
			print("Found output "..output.." multiview "..input)
		end
	end
	Controls["Join_Output_"..output.."_Multiview_"..input].Value = flag
	return flag
end

function ZEEVEE.REPORT_STATUS(state, msg)
	DEBUG.FUNCTION("ZEEVEE.REPORT_STATUS")
	Controls.Status.Value, Controls.Status.String = StatusState[state], msg or ""
end
  

function ZEEVEE.SET_VIDEO_WALL_MODE()
	DEBUG.FUNCTION("ZEEVEE.SET_VIDEO_WALL_MODE")
	local cmd = "set video-wall-encoder " .. encoder .. " " .. mode
	DEBUG.TX("Sending Video Wall Command: " .. cmd)
	HttpClient.Upload {
		Url = ZEEVEE.ENDPOINT,
		Method = "POST",
		Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
		Headers = ZEEVEE.HEADERS,
		EventHandler = ZEEVEE.PROCESS_GENERIC
  }
end

function ZEEVEE.PROCESS_GENERIC(tbl, code, data, err, headers)
	DEBUG.FUNCTION("ZEEVEE.PROCESS_GENERIC")
	DEBUG.RX(string.format("RX (%s): %s",code or 0, data or ""))
	if(code == 200) then
		ZEEVEE.REPORT_STATUS("OK")
		ZEEVEE.GET_DEVICE_CONFIG()
	elseif code == 401.0 or Controls["ipAddress"].String == "" then  -- Invalid Address handler
		ZEEVEE.REPORT_STATUS("MISSING", "Check IP Address") 
	else
		ZEEVEE.REPORT_STATUS("MISSING",err)
	end
end


function ZEEVEE.SET_JOIN(input,output)
	DEBUG.FUNCTION("ZEEVEE.SET_JOIN")
	local cmd = "join " .. (Controls.sourceName.String or Controls.sourceName[input].String) .. " " .. (Controls.displayName.String or Controls.displayName[input].String) .. " " .. (Controls.joinType.String or Controls.joinType[input].String or "fast-switched")
	DEBUG.TX("Sending Join Command: " .. cmd)
	HttpClient.Upload {
		Url = ZEEVEE.ENDPOINT,
		Method = "POST",
		Data = ZEEVEE.POSTDATA .. string.gsub(cmd," ","+"),
		Headers = ZEEVEE.HEADERS,
		EventHandler = ZEEVEE.PROCESS_GENERIC
  }
end

IPType = {[0] = "Error", "IPv4", "IPv6", "string"}

function ValidIP(ip)
  -- check for format 1.11.111.111 for ipv4
  local chunks = {ip:match("^(%d+)%.(%d+)%.(%d+)%.(%d+)$")}
  if #chunks == 4 then
    for _,v in pairs(chunks) do
      if tonumber(v) > 255 then return false end
    end
    return true
  end
  return false
end

if Controls then
	rapidjson = require("rapidjson")
	StatusState = { OK = 0, COMPROMISED = 1, FAULT = 2, NOTPRESENT = 3, MISSING = 4, INITIALIZING = 5}  -- Status states in designer

	if(string.len(Properties["IP Address"].Value) > 0) then
		Controls["ipAddress"].String = Properties["IP Address"].Value
	end
	if(Properties["Port"] ~= 0 and Properties["Port"] ~= null) then
		Controls["port"].Value = "" .. Properties["Port"].Value
	end


	if(string.len(Controls.port.String) == 0 or Controls.port.String == "") then
		Controls.port.String = "80"
	end
	if(string.len(Controls.ipAddress.String) == 0 or Controls.ipAddress.String == "") then
		ZEEVEE.REPORT_STATUS("MISSING", "Check IP Address")
	end
	Controls.ipAddress.EventHandler = function()
		if(ValidIP(Controls.ipAddress.String)) then
			ZEEVEE.INIT()
		else
			Controls.ipAddress.String = ""
			ZEEVEE.REPORT_STATUS("MISSING", "Check IP Address")
		end
	end
	Controls.port.EventHandler = function()
		if(tonumber(Controls.ipAddress.port) ~= nil) then
			if(ValidIP(Controls.ipAddress.String)) then
				ZEEVEE.INIT()
			else
				Controls.ipAddress.String = "80"
				ZEEVEE.INIT()
			end
		else
			Controls.ipAddress.String = "80"
			ZEEVEE.INIT()
		end
	end
	ZEEVEE.INIT()
end
